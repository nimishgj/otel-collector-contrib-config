extensions:
  health_check:
    endpoint: ${env:MY_POD_IP}:13133
  zpages:
    endpoint: ${env:MY_POD_IP}:55679
exporters:
  otlp/agent:
    endpoint: scout-agent-collector.scout.svc.cluster.local:4317
    tls:
      insecure: true

processors:
  batch:
    timeout: 2s
    send_batch_size: 8192
    send_batch_max_size: 10000
  memory_limiter:
    check_interval: 5s
    limit_percentage: 80
    spike_limit_percentage: 30
  resource:
    attributes:
      - key: service.name
        value: <service-name>
        action: upsert
  resource/k8s:
    attributes:
      - key: service.name
        value: k8s
        action: upsert
  resource/env:
    attributes:
      - key: environment
        value: playground
        action: upsert
      - key: k8s.cluster.name
        value: <cluster-name>
        action: upsert
  resourcedetection/eks:
    detectors: [env, eks]
    override: true
    eks:
      resource_attributes:
        k8s.cluster.name:
          enabled: true
  k8sattributes:
    auth_type: "serviceAccount"
    extract:
      metadata:
        - k8s.namespace.name
        - k8s.pod.name
        - k8s.pod.hostname
        - k8s.pod.ip
        - k8s.pod.start_time
        - k8s.pod.uid
        - k8s.replicaset.uid
        - k8s.replicaset.name
        - k8s.deployment.uid
        - k8s.deployment.name
        - k8s.daemonset.uid
        - k8s.daemonset.name
        - k8s.statefulset.uid
        - k8s.statefulset.name
        - k8s.cronjob.name
        - k8s.job.uid
        - k8s.job.name
        - k8s.node.name
        - k8s.cluster.uid
        - container.image.name
        - container.image.tag
        - container.id
      annotations:
        - tag_name: service.name
          key: resource.opentelemetry.io/service.name
          from: pod
        - tag_name: service.namespace
          key: resource.opentelemetry.io/service.namespace
          from: pod
        - tag_name: service.version
          key: resource.opentelemetry.io/service.version
          from: pod
        - tag_name: service.instance.id
          key: resource.opentelemetry.io/service.instance.id
          from: pod
      labels:
        - tag_name: kube_app_name
          key: app.kubernetes.io/name
          from: pod
        - tag_name: kube_app_instance
          key: app.kubernetes.io/instance
          from: pod
        - tag_name: kube_app_version
          key: app.kubernetes.io/version
          from: pod
        - tag_name: kube_app_component
          key: app.kubernetes.io/component
          from: pod
        - tag_name: kube_app_part_of
          key: app.kubernetes.io/part-of
          from: pod
        - tag_name: kube_app_managed_by
          key: app.kubernetes.io/managed-by
          from: pod
    pod_association:
      - sources:
          - from: resource_attribute
            name: k8s.pod.ip
      - sources:
          - from: resource_attribute
            name: k8s.pod.uid
      - sources:
          - from: connection

receivers:
  otlp:
    protocols:
      grpc:
        endpoint: ${env:MY_POD_IP}:4317
      http:
        endpoint: ${env:MY_POD_IP}:4318
  kubeletstats:
    collection_interval: 60s
    endpoint: https://${env:K8S_NODE_NAME}:10250
    insecure_skip_verify: true
    auth_type: "serviceAccount"
    metric_groups:
      - node
      - pod
      - volume
      - container
    extra_metadata_labels:
      - container.id
  filelog:
    include:
      - /var/log/pods/*/*/*.log
    start_at: end
    include_file_path: true
    include_file_name: false
    operators:
      - type: container
        id: container-parser
service:
  extensions: [zpages, health_check]
  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch, resource/env]
      exporters: [otlp/agent]
    logs:
      receivers: [otlp, filelog]
      processors: [batch, resource/env]
      exporters: [otlp/agent]
    metrics:
      receivers: [otlp]
      processors: [memory_limiter, batch, resource/env]
      exporters: [otlp/agent]
    metrics/k8s:
      receivers: [kubeletstats]
      processors:
        [
          memory_limiter,
          batch,
          resource/k8s,
          resourcedetection/eks,
          resource/env,
          k8sattributes,
        ]
      exporters: [otlp/agent]
  telemetry:
    metrics:
      readers:
        - periodic:
            exporter:
              otlp:
                protocol: http/protobuf
                endpoint: http://${env:MY_POD_IP}:4318
    logs:
      level: debug
      encoding: json
      processors:
        - batch:
            exporter:
              otlp:
                protocol: http/protobuf
                endpoint: http://${env:MY_POD_IP}:4318
    traces:
      processors:
        - batch:
            exporter:
              otlp:
                protocol: http/protobuf
                endpoint: http://${env:MY_POD_IP}:4318



agentOtelcolConfig:
extensions:
  health_check:
    endpoint: ${env:MY_POD_IP}:13133
  zpages:
    endpoint: ${env:MY_POD_IP}:55679
  oauth2client:
    client_id: <client-id>
    client_secret: <client-secret>
    endpoint_params:
      audience: b14collector
    token_url: <client-token-url>
    tls:
      insecure_skip_verify: true
exporters:
  debug:
    verbosity: detailed
  otlphttp/b14:
    endpoint: <client-endpoint>
    auth:
      authenticator: oauth2client
    tls:
      insecure_skip_verify: true
processors:
  batch:
    timeout: 2s
    send_batch_size: 8192
    send_batch_max_size: 10000
  memory_limiter:
    check_interval: 5s
    limit_percentage: 80
    spike_limit_percentage: 30
  resource:
    attributes:
    - key: service.name
      value: <service-name>
      action: upsert
  resource/k8s:
    attributes:
    - key: service.name
      value: k8s
      action: upsert
  resource/env:
    attributes:
    - key: environment
      value: playground
      action: upsert
    - key: k8s.cluster.name
      value: <cluster-name>
      action: upsert
  resourcedetection/eks:
    detectors: [env,  eks]
    override: true
    eks:
      resource_attributes:
        k8s.cluster.name:
          enabled: true
  k8sattributes:
    auth_type: 'serviceAccount'
    extract:
      metadata:
        - k8s.namespace.name
        - k8s.pod.name
        - k8s.pod.hostname
        - k8s.pod.ip
        - k8s.pod.start_time
        - k8s.pod.uid
        - k8s.replicaset.uid
        - k8s.replicaset.name
        - k8s.deployment.uid
        - k8s.deployment.name
        - k8s.daemonset.uid
        - k8s.daemonset.name
        - k8s.statefulset.uid
        - k8s.statefulset.name
        - k8s.cronjob.name
        - k8s.job.uid
        - k8s.job.name
        - k8s.node.name
        - k8s.cluster.uid
        - container.image.name
        - container.image.tag
        - container.id
      annotations:
        - tag_name: service.name
          key: resource.opentelemetry.io/service.name
          from: pod
        - tag_name: service.namespace
          key: resource.opentelemetry.io/service.namespace
          from: pod
        - tag_name: service.version
          key: resource.opentelemetry.io/service.version
          from: pod
        - tag_name: service.instance.id
          key: resource.opentelemetry.io/service.instance.id
          from: pod
      labels:
        - tag_name: kube_app_name
          key: app.kubernetes.io/name
          from: pod
        - tag_name: kube_app_instance
          key: app.kubernetes.io/instance
          from: pod
        - tag_name: kube_app_version
          key: app.kubernetes.io/version
          from: pod
        - tag_name: kube_app_component
          key: app.kubernetes.io/component
          from: pod
        - tag_name: kube_app_part_of
          key: app.kubernetes.io/part-of
          from: pod
        - tag_name: kube_app_managed_by
          key: app.kubernetes.io/managed-by
          from: pod
    pod_association:
        - sources:
            - from: resource_attribute
              name: k8s.pod.ip
        - sources:
            - from: resource_attribute
              name: k8s.pod.uid
        - sources:
            - from: connection
  resource/k8s-events:
    attributes:
      - key: service.name
        value: "k8s-events"
        action: upsert
receivers:
  otlp:
    protocols:
      http:
        endpoint: ${env:MY_POD_IP}:4318
      grpc:
        endpoint: ${env:MY_POD_IP}:4317
  k8s_cluster:
    auth_type: serviceAccount
    collection_interval: 60s
    node_conditions_to_report: [Ready, MemoryPressure, DiskPressure, PIDPressure, NetworkUnavailable]
    resource_attributes:
      k8s.container.status.last_terminated_reason:
        enabled: true
    metrics:
      k8s.pod.status_reason:
        enabled: true
      k8s.node.condition:
        enabled: true
    allocatable_types_to_report: [ cpu, memory, ephemeral-storage, storage ]
  k8sobjects:
    objects:
      - name: events
        mode: pull
        interval: 60s
        group: events.k8s.io
      - name: deployments
        mode: pull
        interval: 60s
        group: deployments.k8s.io
      - name: resourcequotas
        mode: pull
        interval: 60s
        group: resourcequotas.k8s.io
service:
  extensions: [ oauth2client, zpages, health_check ]
  pipelines:
    traces:
      receivers: [ otlp]
      processors: [ batch, resource/env ]
      exporters: [ otlphttp/b14 ]
    logs:
      receivers: [ otlp ]
      processors: [ batch, resource/env ]
      exporters: [ otlphttp/b14, debug ]
    logs/k8s-events:
      exporters: [ otlphttp/b14 ]
      processors: [ memory_limiter, batch, resource/k8s-events, resourcedetection/eks, resource/env ]
      receivers: [ k8sobjects]
    logs/k8s-cluster:
      exporters: [ otlphttp/b14 ]
      processors: [ memory_limiter, batch, resource/k8s, resourcedetection/eks, resource/env ]
      receivers: [ k8s_cluster ]
    metrics:
      receivers: [ otlp ]
      processors: [ memory_limiter, batch, resource/env ]
      exporters: [ otlphttp/b14 ]
    metrics/k8s:
      receivers: [ k8s_cluster ]
      processors: [ memory_limiter, batch, resource/k8s, resourcedetection/eks, resource/env, k8sattributes]
      exporters: [ otlphttp/b14 ]
  telemetry:
    metrics:
      readers:
        - periodic:
           exporter:
             otlp:
               protocol: http/protobuf
               endpoint: http://${env:MY_POD_IP}:4318
    logs:
      level: debug
      encoding: json
      processors:
        - batch:
           exporter:
             otlp:
               protocol: http/protobuf
               endpoint: http://${env:MY_POD_IP}:4318
    traces:
      processors:
        - batch:
           exporter:
             otlp:
               protocol: http/protobuf
               endpoint: http://${env:MY_POD_IP}:4318
